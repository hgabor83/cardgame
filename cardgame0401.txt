import java.util.*;
import java.io.*;
import java.math.*;

/**
 * Auto-generated code below aims at helping you parse the standard input
 * according to the problem statement.
 **/
class Player {

	static class CardPlayers {
		int playerId;
		int playerHealth;
		int playerMana;
		int playerDeck;
		int playerRune;
		int playerDraw;

		CardPlayers(int playerId, int playerHealth, int playerMana, int playerDeck, int playerRune, int playerDraw) {
			this.playerId = playerId;
			this.playerHealth = playerHealth;
			this.playerMana = playerMana;
			this.playerDeck = playerDeck;
			this.playerRune = playerRune;
			this.playerDraw = playerDraw;
		}

		public int getPlayerId() {
			return playerId;
		}

		public void setPlayerId(int playerId) {
			this.playerId = playerId;
		}

		public int getPlayerHealth() {
			return playerHealth;
		}

		public void setPlayerHealth(int playerHealth) {
			this.playerHealth = playerHealth;
		}

		public int getPlayerMana() {
			return playerMana;
		}

		public void setPlayerMana(int playerMana) {
			this.playerMana = playerMana;
		}

		public int getPlayerDeck() {
			return playerDeck;
		}

		public void setPlayerDeck(int playerDeck) {
			this.playerDeck = playerDeck;
		}

		public int getPlayerRune() {
			return playerRune;
		}

		public void setPlayerRune(int playerRune) {
			this.playerRune = playerRune;
		}

		public int getPlayerDraw() {
			return playerDraw;
		}

		public void setPlayerDraw(int playerDraw) {
			this.playerDraw = playerDraw;
		}

	}

	static class Cards {
		int cardNumber;
		int instanceId;
		int location;
		int cardType;
		int cost;
		int attack;
		int defense;
		String abilities;
		int myHealthChange;
		int opponentHealthChange;
		int cardDraw;
		double heuristicCost;
		double guardValue;
		double breakThruValue;
		double chargeValue;
		double defenseValue;
		double attackValue;
		double drainValue;
		double lethalValue;
		double wardValue;
		int priority;
		boolean used;
		boolean summoned;

		Cards(int cardNumber, int instanceId, int location, int cardType, int cost, int attack, int defense,
				String abilities, int myHealthChange, int opponentHealthChange, int cardDraw) {
			super();
			this.cardNumber = cardNumber;
			this.instanceId = instanceId;
			this.location = location;
			this.cardType = cardType;
			this.cost = cost;
			this.attack = attack;
			this.defense = defense;
			this.abilities = abilities;
			this.myHealthChange = myHealthChange;
			this.opponentHealthChange = opponentHealthChange;
			this.cardDraw = cardDraw;
			this.used = false;
			this.summoned = false;
			if (abilities.contains("G"))
				guardValue = 100;
			else
				guardValue = 1;
			if (abilities.contains("B"))
				breakThruValue = 2;
			else
				breakThruValue = 1;
			if (abilities.contains("C"))
				chargeValue = 2;
			else
				chargeValue = 1;
			if (abilities.contains("D"))
				drainValue = 2;
			else
				drainValue = 1;
			if (abilities.contains("L"))
				lethalValue = 2;
			else
				lethalValue = 1;
			if (abilities.contains("W"))
				wardValue = 2;
			else
				wardValue = 1;

			// defenseValue = this.defense / 1.0;

			// if (this.attack == 0)
			// attackValue = 0.001;
			// else
			attackValue = Math.abs(this.attack);
			if (attackValue == 0)
				attackValue = 1;

			defenseValue = 1.0;
			// attackValue = 1.0;

			// got

			List<Integer> priorities = Arrays.asList(68, 116, 7, 80, 65, 51, 49, 48, 66, 67, 23, 61, 115, 69, 44, 37,
					52, 53, 18, 29, 50, 54, 82, 32, 114, 95, 79, 64, 99, 111, 33, 84, 3, 62, 103, 11, 96, 97, 77, 139,
					59, 36, 109, 81, 19, 9, 87, 105, 121, 6, 8, 85, 93, 5, 91, 137, 70, 88, 28, 112, 83, 21, 34, 46,
					106, 26, 104, 22, 17, 15, 1, 72, 75, 98, 45, 90, 58, 25, 13, 39, 133, 12, 35, 100, 41, 16, 118, 30,
					129, 119, 60, 135, 38, 71, 76, 134, 94, 126, 74, 43, 122, 56, 128, 27, 73, 127, 40, 4, 14, 125, 20,
					2, 47, 120, 101, 78, 108, 31, 89, 86, 42, 10, 102, 132, 24, 136, 138, 130, 107, 123, 117, 113, 131,
					57, 124, 63, 92, 55, 140, 110, 144, 145, 147, 142, 149, 158, 146, 152, 155, 154, 151, 157, 143, 156,
					159, 153, 141, 150, 148, 160);

			// cost
			/*
			 * List<Integer> priorities = Arrays.asList(83, 91, 118, 136, 141, 142, 143, 1,
			 * 2, 3, 24, 38, 39, 48, 92, 93, 117, 119, 144, 4, 5, 6, 7, 8, 25, 26, 27, 28,
			 * 29, 47, 49, 55, 63, 64, 65, 84, 94, 95, 96, 120, 121, 122, 123, 137, 138,
			 * 140, 147, 148, 150, 153, 154, 160, 9, 10, 11, 12, 30, 31, 32, 40, 41, 50, 54,
			 * 69, 85, 86, 97, 98, 99, 100, 124, 125, 126, 127, 145, 149, 155, 156, 157,
			 * 158, 13, 14, 15, 16, 17, 18, 33, 42, 51, 52, 53, 56, 57, 70, 71, 72, 73, 87,
			 * 101, 102, 103, 104, 128, 129, 130, 131, 134, 139, 146, 159, 19, 20, 21, 34,
			 * 66, 74, 75, 88, 89, 105, 106, 107, 108, 109, 110, 132, 133, 151, 22, 35, 36,
			 * 37, 43, 44, 45, 58, 67, 68, 76, 111, 112, 113, 135, 23, 59, 60, 77, 82, 114,
			 * 152, 78, 79, 80, 90, 115, 46, 61, 81, 62, 116);
			 */

			// cost+attack+defense
			/*
			 * List<Integer> priorities = Arrays.asList(91, 83, 136, 118, 142, 143, 141, 3,
			 * 1, 39, 93, 38, 2, 119, 24, 48, 117, 92, 144, 5, 123, 6, 26, 96, 25, 8, 95, 7,
			 * 27, 65, 29, 4, 47, 94, 122, 28, 49, 64, 84, 120, 55, 63, 121, 137, 138, 140,
			 * 153, 154, 160, 147, 148, 150, 11, 69, 30, 9, 97, 32, 50, 10, 31, 12, 99, 98,
			 * 40, 85, 126, 41, 54, 124, 100, 86, 125, 127, 149, 156, 157, 155, 158, 145,
			 * 14, 18, 70, 16, 13, 72, 15, 17, 73, 104, 33, 128, 42, 131, 103, 51, 101, 102,
			 * 71, 56, 87, 129, 52, 134, 57, 53, 130, 139, 159, 146, 20, 21, 75, 19, 109,
			 * 106, 74, 66, 105, 88, 89, 133, 34, 107, 132, 108, 110, 151, 22, 68, 111, 45,
			 * 37, 58, 43, 67, 76, 135, 35, 112, 36, 44, 113, 23, 59, 77, 114, 82, 60, 152,
			 * 79, 80, 78, 90, 115, 61, 46, 81, 62, 116);
			 */

			// guards first
			/*
			 * List<Integer> priorities = Arrays.asList(142, 148, 149, 151, 116, 63, 64,
			 * 115, 40, 49, 74, 80, 62, 87, 91, 143, 92, 93, 55, 94, 122, 95, 96, 138, 100,
			 * 99, 98, 97, 103, 101, 104, 102, 110, 108, 105, 106, 107, 112, 111, 113, 114,
			 * 118, 136, 141, 2, 119, 3, 24, 1, 144, 4, 121, 8, 28, 27, 6, 26, 29, 25, 5,
			 * 153, 154, 160, 123, 147, 150, 127, 12, 125, 9, 126, 32, 30, 11, 31, 156, 157,
			 * 145, 155, 158, 57, 56, 130, 129, 15, 17, 18, 33, 128, 13, 134, 16, 131, 14,
			 * 146, 159, 19, 109, 34, 21, 20, 37, 135, 22, 36, 60, 23, 59, 152, 61, 117, 69,
			 * 73, 72, 70, 75, 132, 58, 35, 77, 79, 78, 71, 81, 76, 45, 82, 83, 140, 86, 85,
			 * 88, 89, 90, 41, 84, 53, 38, 39, 47, 124, 10, 42, 43, 46, 44, 48, 120, 54, 50,
			 * 51, 52, 139, 7, 65, 137, 66, 133, 67, 68);
			 */

			List<Integer> healtyCreatures = Arrays.asList(73, 113, 107, 27, 89, 92, 13, 59);
			List<Integer> damagerCreatures = Arrays.asList(2, 24, 26, 30, 31, 67, 78, 102);
			List<Integer> toBeBannedCreatures = Arrays.asList(91, 45, 25);
			List<Integer> drawerCreatures = Arrays.asList(28, 29, 32, 33, 34, 35, 36, 37);
			List<Integer> healtyItems = Arrays.asList(130, 153, 156, 157, 159, 160);
			List<Integer> damagerItems = Arrays.asList(146, 154, 155, 156, 160);
			List<Integer> drawerItems = Arrays.asList(134, 138, 147, 149, 152, 154, 157);
			double healtyC = 1;
			if (healtyCreatures.indexOf(this.cardNumber) != -1)
				healtyC = 0.1;
			double damagerC = 1;
			if (damagerCreatures.indexOf(this.cardNumber) != -1)
				damagerC = 0.5;
			double toBeBannedC = 1;
			if (toBeBannedCreatures.indexOf(this.cardNumber) != -1)
				toBeBannedC = 100;
			double drawerC = 1;
			if (drawerCreatures.indexOf(this.cardNumber) != -1)
				drawerC = 0.5;
			double cardTypeValue = 1;

			switch (this.cardType) {
			case 1: {

				cardTypeValue = 100;
				break;
			}
			case 2: {
				cardTypeValue = 100;
				break;
			}
			case 3: {
				cardTypeValue = 100;
				break;
			}
			default:
				cardTypeValue = 1;
				break;
			}
			if (healtyItems.indexOf(this.cardNumber) != -1)
				cardTypeValue = 0.5;
			if (damagerItems.indexOf(this.cardNumber) != -1)
				cardTypeValue = 0.5;
			if (drawerItems.indexOf(this.cardNumber) != -1)
				cardTypeValue = 0.5;

			double costValue = cost;
			if (cost == 0)
				costValue = 0.001;

			this.heuristicCost = costValue * healtyC * damagerC * toBeBannedC * drawerC * cardTypeValue * 1.0
					/ (guardValue * breakThruValue * chargeValue * defenseValue * attackValue * drainValue * lethalValue
							* wardValue);

			this.priority = priorities.indexOf(this.cardNumber);

		}

		public int getCardNumber() {
			return cardNumber;
		}

		public void setCardNumber(int cardNumber) {
			this.cardNumber = cardNumber;
		}

		public int getInstanceId() {
			return instanceId;
		}

		public void setInstanceId(int instanceId) {
			this.instanceId = instanceId;
		}

		public int getLocation() {
			return location;
		}

		public void setLocation(int location) {
			this.location = location;
		}

		public int getCardType() {
			return cardType;
		}

		public void setCardType(int cardType) {
			this.cardType = cardType;
		}

		public int getCost() {
			return cost;
		}

		public void setCost(int cost) {
			this.cost = cost;
		}

		public int getAttack() {
			return attack;
		}

		public void setAttack(int attack) {
			this.attack = attack;
		}

		public int getDefense() {
			return defense;
		}

		public void setDefense(int defense) {
			this.defense = defense;
		}

		public String getAbilities() {
			return abilities;
		}

		public void setAbilities(String abilities) {
			this.abilities = abilities;
		}

		public int getMyHealthChange() {
			return myHealthChange;
		}

		public void setMyHealthChange(int myHealthChange) {
			this.myHealthChange = myHealthChange;
		}

		public int getOpponentHealthChange() {
			return opponentHealthChange;
		}

		public void setOpponentHealthChange(int opponentHealthChange) {
			this.opponentHealthChange = opponentHealthChange;
		}

		public int getCardDraw() {
			return cardDraw;
		}

		public void setCardDraw(int cardDraw) {
			this.cardDraw = cardDraw;
		}

		public double getHeuristicCost() {
			return heuristicCost;
		}

	}

	public static List<Cards> getNextboardCards(int myMana, List<Cards> myHandCards, List<Cards> myHandCards0,
			List<Cards> myHandCards1, List<Cards> myHandCards2, List<Cards> myHandCards3, List<Cards> myHandCards4,
			List<Cards> myHandCards5, List<Cards> myHandCards6, List<Cards> myHandCards7, List<Cards> myHandCards8,
			List<Cards> myHandCards9, List<Cards> myHandCards10, List<Cards> myHandCards11, List<Cards> myHandCards12) {
		List<Cards> toBeboardCards = new ArrayList<>();
		int manaToSpend = myMana;

		// first guard card then rest

		for (Cards card : myHandCards12) {
			if (manaToSpend >= card.cost && card.abilities.contains("G")) {
				card.summoned = true;
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards11) {
			if (manaToSpend >= card.cost && card.abilities.contains("G")) {
				card.summoned = true;
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards10) {
			if (manaToSpend >= card.cost && card.abilities.contains("G")) {
				card.summoned = true;
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards9) {
			if (manaToSpend >= card.cost && card.abilities.contains("G")) {
				card.summoned = true;
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards8) {
			if (manaToSpend >= card.cost && card.abilities.contains("G")) {
				card.summoned = true;
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards7) {
			if (manaToSpend >= card.cost && card.abilities.contains("G")) {
				card.summoned = true;
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards6) {
			if (manaToSpend >= card.cost && card.abilities.contains("G")) {
				card.summoned = true;
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards5) {
			if (manaToSpend >= card.cost && card.abilities.contains("G")) {
				card.summoned = true;
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards4) {
			if (manaToSpend >= card.cost && card.abilities.contains("G")) {
				card.summoned = true;
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards3) {
			if (manaToSpend >= card.cost && card.abilities.contains("G")) {
				card.summoned = true;
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards2) {
			if (manaToSpend >= card.cost && card.abilities.contains("G")) {
				card.summoned = true;
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards1) {
			if (manaToSpend >= card.cost && card.abilities.contains("G")) {
				card.summoned = true;
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards0) {
			if (manaToSpend >= card.cost && card.abilities.contains("G")) {
				card.summoned = true;
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}

		for (Cards card : myHandCards12) {
			if (manaToSpend >= card.cost && !card.summoned) {
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards11) {
			if (manaToSpend >= card.cost && !card.summoned) {
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards10) {
			if (manaToSpend >= card.cost && !card.summoned) {
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards9) {
			if (manaToSpend >= card.cost && !card.summoned) {
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards8) {
			if (manaToSpend >= card.cost && !card.summoned) {
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards7) {
			if (manaToSpend >= card.cost && !card.summoned) {
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards6) {
			if (manaToSpend >= card.cost && !card.summoned) {
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards5) {
			if (manaToSpend >= card.cost && !card.summoned) {
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards4) {
			if (manaToSpend >= card.cost && !card.summoned) {
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards3) {
			if (manaToSpend >= card.cost && !card.summoned) {
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards2) {
			if (manaToSpend >= card.cost && !card.summoned) {
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards1) {
			if (manaToSpend >= card.cost && !card.summoned) {
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}
		for (Cards card : myHandCards0) {
			if (manaToSpend >= card.cost && !card.summoned) {
				toBeboardCards.add(card);
				manaToSpend = manaToSpend - card.cost;
			}
		}

		/*
		 * myHandCards.sort((Cards c1, Cards c2) -> Integer.compare(c1.priority,
		 * c2.priority)); int chosen = 100; while (manaToSpend > 0 && chosen > 0) {
		 * System.err.println("xxxxxManaToSpend: " + manaToSpend); chosen = 0; for
		 * (Cards card : myHandCards) { System.err.println("oooCardCost: " + card.cost);
		 * if (manaToSpend >= card.cost) { toBeboardCards.add(card); manaToSpend =
		 * manaToSpend - card.cost; chosen++; System.err.println("xxxxxChosen: " +
		 * chosen); } } }
		 */

		return toBeboardCards;

	}

	public static int getWeakestId(List<Cards> myBoardCards, int lastSummonedId) {
		// myWeakestBoardCard
		int myWeakestId = -1;
		int myWeakestHP = 100;
		for (Cards card : myBoardCards) {
			if (card.defense < myWeakestHP && card.abilities.contains("G")) {
				myWeakestHP = card.defense;
				myWeakestId = card.instanceId;
			}
		}
		if (myWeakestId == -1)
			for (Cards card : myBoardCards) {
				if (card.defense < myWeakestHP) {
					myWeakestHP = card.defense;
					myWeakestId = card.instanceId;
				}
			}

		if (myWeakestId == -1)
			return lastSummonedId;
		else
			return myWeakestId;

	}

	public static int getAttackerId(List<Cards> myBoardCards, int targetHP, boolean myGuardsDontAttack) {
		// myBoardCards.sort((Cards c1, Cards c2) -> Integer.compare(c1.attack,
		// c2.attack));
		int attackerId = 0;
		for (Cards card : myBoardCards) {
			if (!card.used) {
				if (myGuardsDontAttack && card.abilities.contains("G")) {
					// Guards are protected
				} else {
					attackerId = card.instanceId;
					card.used = true;
					break;
				}
			}
		}
		// if (myBoardCards.get(0).abilities.contains("L"))
		// attackerId = myBoardCards.get(0).instanceId;
		// else

		/*
		 * for (Cards card : myBoardCards) { if (card.attack >= targetHP && !card.used)
		 * { System.err.println("TargetHP: " + targetHP);
		 * System.err.println("CardAttack: " + card.attack);
		 * 
		 * attackerId = card.instanceId; } }
		 * 
		 * System.err.println("*******Attacker1st:" + attackerId);
		 * 
		 * if (attackerId == 0) for (Cards card : myBoardCards) { if (!card.used) {
		 * System.err.println("TargetHP: " + targetHP);
		 * System.err.println("CardAttack: " + card.attack); attackerId =
		 * card.instanceId; } }
		 * 
		 * System.err.println("*******Attacker2nd:" + attackerId);
		 * 
		 * for (Cards card : myBoardCards) { if (card.instanceId == attackerId) {
		 * card.used = true; } }
		 */

		return attackerId;
	}

	public static int getAttackerHP(List<Cards> myBoardCards, int attackerId) {
		int attackerHP = 0;
		for (Cards card : myBoardCards) {
			if (card.instanceId == attackerId) {
				attackerHP = card.attack;
			}
		}
		return attackerHP;
	}

	public static boolean isEnemyAttackerADrainer(List<Cards> enemyBoardCards, int attackerId) {
		boolean drainer = false;
		for (Cards card : enemyBoardCards) {
			if (card.instanceId == attackerId && card.abilities.contains("D")) {
				drainer = true;
			}
		}
		return drainer;
	}

	public static boolean isEnemyAttackerABreakThru(List<Cards> enemyBoardCards, int attackerId) {
		boolean breakThru = false;
		for (Cards card : enemyBoardCards) {
			if (card.instanceId == attackerId && card.abilities.contains("B")) {
				breakThru = true;
			}
		}
		return breakThru;
	}

	public static boolean isMyAttackedABreakThru(List<Cards> myBoardCards, int attackedId) {
		boolean breakThru = false;
		for (Cards card : myBoardCards) {
			if (card.instanceId == attackedId && card.abilities.contains("B")) {
				breakThru = true;
			}
		}
		return breakThru;
	}

	public static int getEnemyAttackerAttackPoints(List<Cards> enemyBoardCards, int attackerId) {
		int attackPoints = 0;
		for (Cards card : enemyBoardCards) {
			if (card.instanceId == attackerId) {
				attackPoints = card.attack;
			}
		}
		return attackPoints;
	}

	public static int getEnemyAttackerDefensePoints(List<Cards> enemyBoardCards, int attackerId) {
		int defPoints = 0;
		for (Cards card : enemyBoardCards) {
			if (card.instanceId == attackerId) {
				defPoints = card.defense;
			}
		}
		return defPoints;
	}

	public static int getmyAttackedDefensePoints(List<Cards> myBoardCards, int attackedId) {
		int defPoints = 0;
		for (Cards card : myBoardCards) {
			System.err.println("InDefi:" + card.instanceId);
			if (card.instanceId == attackedId) {
				defPoints = card.defense;
				System.err.println("Defi:" + defPoints);
			}
		}
		return defPoints;
	}

	public static int getMyAttackedAttackPoints(List<Cards> myBoardCards, int attackedId) {
		int attackPoints = 0;
		for (Cards card : myBoardCards) {
			System.err.println("InAti:" + card.instanceId);
			if (card.instanceId == attackedId) {
				attackPoints = card.attack;
				System.err.println("Ati:" + attackPoints);
			}
		}
		return attackPoints;
	}

	public static void main(String args[]) {
		Scanner in = new Scanner(System.in);
		List<CardPlayers> cardPlayers = new ArrayList<>();
		List<Cards> cards = new ArrayList<>();
		List<Cards> myCards = new ArrayList<>();
		List<Cards> myHandCards = new ArrayList<>();
		List<Cards> myBoardCards = new ArrayList<>();
		List<Cards> enemyBoardGuardCards = new ArrayList<>();
		List<Cards> enemyBoardCards = new ArrayList<>();
		List<Cards> myHandCards0 = new ArrayList<>();
		List<Cards> myHandCards1 = new ArrayList<>();
		List<Cards> myHandCards2 = new ArrayList<>();
		List<Cards> myHandCards3 = new ArrayList<>();
		List<Cards> myHandCards4 = new ArrayList<>();
		List<Cards> myHandCards5 = new ArrayList<>();
		List<Cards> myHandCards6 = new ArrayList<>();
		List<Cards> myHandCards7 = new ArrayList<>();
		List<Cards> myHandCards8 = new ArrayList<>();
		List<Cards> myHandCards9 = new ArrayList<>();
		List<Cards> myHandCards10 = new ArrayList<>();
		List<Cards> myHandCards11 = new ArrayList<>();
		List<Cards> myHandCards12 = new ArrayList<>();

		int myDeckCards0 = 0;
		int myDeckCards1 = 0;
		int myDeckCards2 = 0;
		int myDeckCards3 = 0;
		int myDeckCards4 = 0;
		int myDeckCards5 = 0;
		int myDeckCards6 = 0;
		int myDeckCards7 = 0;
		int myDeckCards8 = 0;
		int myDeckCards9 = 0;
		int myDeckCards10 = 0;
		int myDeckCards11 = 0;
		int myDeckCards12 = 0;

		Comparator<Cards> compareByHeuristicCost = (Cards c1, Cards c2) -> Double.compare(c1.heuristicCost,
				c2.heuristicCost);

		Comparator<Cards> compareByAttackPoints = (Cards c1, Cards c2) -> Integer.compare(c1.attack, c2.attack);
		Comparator<Cards> compareByDefensePoints = (Cards c1, Cards c2) -> Integer.compare(c1.defense, c2.defense);
		Comparator<Cards> compareByPriority = (Cards c1, Cards c2) -> Integer.compare(c1.priority, c2.priority);

		// game loop
		int turn = 0;
		int boardCards = 0;
		double minHeuristicCost;
		int enemyBossHP = 30;
		int opponentHealthChange = 0;

		while (true) {
			System.err.println("******Enemy Boss starts with**********: " + enemyBossHP);
			cardPlayers.clear();
			cards.clear();

			turn++;
			System.err.println("=========================================");
			System.err.println("TURN: " + turn);
			for (int i = 0; i < 2; i++) {
				int playerHealth = in.nextInt();
				int playerMana = in.nextInt();
				int playerDeck = in.nextInt();
				int playerRune = in.nextInt();
				int playerDraw = in.nextInt();
				CardPlayers cardPlayer = new CardPlayers(i, playerHealth, playerMana, playerDeck, playerRune,
						playerDraw);
				cardPlayers.add(cardPlayer);

			}
			int opponentHand = in.nextInt();
			int opponentActions = in.nextInt();
			if (in.hasNextLine()) {
				in.nextLine();
			}
			for (int i = 0; i < opponentActions; i++) {
				String cardNumberAndAction = in.nextLine();
				System.err.println("ENEMY: " + cardNumberAndAction);
				String[] enemyActionArray = cardNumberAndAction.split(" ", -1);
				System.err.println("ENEMYAA:" + enemyActionArray[1]);
				if (enemyActionArray[1].contentEquals("SUMMON")) {
					int enemyAttackerCardNumber = Integer.parseInt(enemyActionArray[0]);
					switch (enemyAttackerCardNumber) {
					case 1: {
						enemyBossHP = enemyBossHP + 1;
						break;
					}
					case 13: {
						enemyBossHP = enemyBossHP + 1;
						break;
					}
					case 25: {
						enemyBossHP = enemyBossHP - 2;
						break;
					}
					case 27: {
						enemyBossHP = enemyBossHP + 2;
						break;
					}
					case 45: {
						enemyBossHP = enemyBossHP - 3;
						break;
					}
					case 59: {
						enemyBossHP = enemyBossHP + 1;
						break;
					}
					case 74: {
						enemyBossHP = enemyBossHP + 4;
						break;
					}
					case 89: {
						enemyBossHP = enemyBossHP + 2;
						break;
					}
					case 92: {
						enemyBossHP = enemyBossHP + 2;
						break;
					}
					case 107: {
						enemyBossHP = enemyBossHP + 3;
						break;
					}
					case 113: {
						enemyBossHP = enemyBossHP + 4;
						break;
					}

					default:
						break;
					}

				} else if (enemyActionArray[1].contentEquals("ATTACK")) {
					int enemyAttackerId = Integer.parseInt(enemyActionArray[2]);
					System.err.println("Attacker: " + enemyAttackerId);
					int myAttackedId = Integer.parseInt(enemyActionArray[3]);
					System.err.println("Attacked: " + myAttackedId);
					int enemyAttackPoints = getEnemyAttackerAttackPoints(enemyBoardCards, enemyAttackerId);
					System.err.println("Enemy AP: " + enemyAttackPoints);
					int enemyDefensePoints = getEnemyAttackerDefensePoints(enemyBoardCards, enemyAttackerId);
					System.err.println("Enemy DP: " + enemyDefensePoints);
					int myAttackedHP = 0;
					int myAttackedAttackPoints = getMyAttackedAttackPoints(myBoardCards, myAttackedId);
					System.err.println("My AP: " + myAttackedAttackPoints);

					System.err.println("Enemy D: " + isEnemyAttackerADrainer(enemyBoardCards, enemyAttackerId));
					System.err.println("Enemy B: " + isEnemyAttackerABreakThru(enemyBoardCards, enemyAttackerId));

					if (myAttackedId != -1) {
						myAttackedHP = getmyAttackedDefensePoints(myBoardCards, myAttackedId);
						System.err.println("My DP: " + myAttackedHP);
					}
					if (isEnemyAttackerADrainer(enemyBoardCards, enemyAttackerId)) {
						if (myAttackedId == -1) {
							System.err.println("Enemy Drainer**********: " + enemyAttackPoints);
							enemyBossHP = enemyBossHP + enemyAttackPoints;
							System.err.println("Boss left**********: " + enemyBossHP);
						} else {
							if (isEnemyAttackerABreakThru(enemyBoardCards, enemyAttackerId)) {
								enemyBossHP = enemyBossHP + enemyAttackPoints;
								System.err.println("Enemy is D and B");
								System.err.println("Enemy AP: " + enemyAttackPoints);
								System.err.println("BHP: " + enemyBossHP);
							} else {
								System.err.println("Enemy Drainer attackink nonboss**********: "
										+ Math.min(enemyAttackPoints, myAttackedHP));
								enemyBossHP = enemyBossHP + Math.min(enemyAttackPoints, myAttackedHP);
								System.err.println("Boss left**********: " + enemyBossHP);
							}
						}
					}
					if (isMyAttackedABreakThru(myBoardCards, myAttackedId)) {
						if (myAttackedId != -1) {
							enemyBossHP = enemyBossHP + enemyDefensePoints - myAttackedAttackPoints;
						}
					}
				}
			}

			myCards.clear();
			myHandCards.clear();
			myHandCards0.clear();
			myHandCards1.clear();
			myHandCards2.clear();
			myHandCards3.clear();
			myHandCards4.clear();
			myHandCards5.clear();
			myHandCards6.clear();
			myHandCards7.clear();
			myHandCards8.clear();
			myHandCards9.clear();
			myHandCards10.clear();
			myHandCards11.clear();
			myHandCards12.clear();
			myBoardCards.clear();
			enemyBoardGuardCards.clear();
			enemyBoardCards.clear();
			boardCards = 0;

			int cardCount = in.nextInt();
			for (int i = 0; i < cardCount; i++) {
				int cardNumber = in.nextInt();
				int instanceId = in.nextInt();
				int location = in.nextInt();
				int cardType = in.nextInt();
				int cost = in.nextInt();
				int attack = in.nextInt();
				int defense = in.nextInt();
				String abilities = in.next();
				int myHealthChange = in.nextInt();
				opponentHealthChange = in.nextInt();
				if (turn > 30) {
					enemyBossHP = enemyBossHP + opponentHealthChange;
					// System.err.println("BOSS HPC: " + opponentHealthChange);
					System.err.println("BOSS HP: " + enemyBossHP);
				}

				int cardDraw = in.nextInt();
				Cards card = new Cards(cardNumber, instanceId, location, cardType, cost, attack, defense, abilities,
						myHealthChange, opponentHealthChange, cardDraw);
				cards.add(card);
			}
			// System.err.println("BOSS HP: " + enemyBossHP);

			System.err.println("---------Cards-------");
			int cnumber = 0;
			int myCardsOnBoard = 0;
			for (Cards card : cards) {
				cnumber++;
				Cards myCard = new Cards(card.cardNumber, card.instanceId, card.location, card.cardType, card.cost,
						card.attack, card.defense, card.abilities, 0, 0, 0);
				/*
				 * System.err.println("---------Draft phase card " + cnumber + " -------");
				 * System.err.println("cardNumber: " + card.cardNumber);
				 * System.err.println("instanceId: " + card.instanceId);
				 * System.err.println("location: " + card.location);
				 * System.err.println("cardType: " + card.cardType); System.err.println("cost: "
				 * + card.cost); System.err.println("attack: " + card.attack);
				 * System.err.println("defense: " + card.defense);
				 * System.err.println("abilities: " + card.abilities);
				 * System.err.println("hcost: " + card.heuristicCost);
				 */
				if (card.location != -1) {

					/*
					 * System.err.println("---------Card " + cnumber + " -------");
					 * System.err.println("cardNumber: " + card.cardNumber);
					 * System.err.println("instanceId: " + card.instanceId);
					 * System.err.println("location: " + card.location);
					 * System.err.println("cardType: " + card.cardType); System.err.println("cost: "
					 * + card.cost); System.err.println("attack: " + card.attack);
					 * System.err.println("defense: " + card.defense);
					 * System.err.println("abilities: " + card.abilities);
					 */

					myCards.add(myCard);

					if (card.location == 0) {
						myHandCards.add(myCard);
						switch (card.cost) {
						case 0: {
							myHandCards0.add(myCard);
							break;
						}
						case 1: {
							myHandCards1.add(myCard);
							break;
						}
						case 2: {
							myHandCards2.add(myCard);
							break;
						}
						case 3: {
							myHandCards3.add(myCard);
							break;
						}
						case 4: {
							myHandCards4.add(myCard);
							break;
						}
						case 5: {
							myHandCards5.add(myCard);
							break;
						}
						case 6: {
							myHandCards6.add(myCard);
							break;
						}
						case 7: {
							myHandCards7.add(myCard);
							break;
						}
						case 8: {
							myHandCards8.add(myCard);
							break;
						}
						case 9: {
							myHandCards9.add(myCard);
							break;
						}
						case 10: {
							myHandCards10.add(myCard);
							break;
						}
						case 11: {
							myHandCards11.add(myCard);
							break;
						}
						case 12: {
							myHandCards12.add(myCard);
							break;
						}
						default:
							System.err.print("----UNEXPECTED----- " + card.cost);
							break;
						}
						/*
						 * System.err.println("---------HANDCard " + cnumber + " -------");
						 * System.err.println("cardNumber: " + card.cardNumber);
						 * System.err.println("instanceId: " + card.instanceId);
						 * System.err.println("location: " + card.location);
						 * System.err.println("cardType: " + card.cardType); System.err.println("cost: "
						 * + card.cost); System.err.println("attack: " + card.attack);
						 * System.err.println("defense: " + card.defense);
						 * System.err.println("abilities: " + card.abilities);
						 * System.err.println("hcost: " + card.heuristicCost);
						 */
					}
					if (card.location == 1) {
						myBoardCards.add(myCard);
						boardCards++;
					}

				} else {
					enemyBoardCards.add(myCard);
					if (myCard.abilities.contains("G"))
						enemyBoardGuardCards.add(myCard);
				}
			}
			// Collections.sort(myHandCards, compareByHeuristicCost);
			/*
			 * Collections.sort(myHandCards0, compareByHeuristicCost);
			 * Collections.sort(myHandCards1, compareByHeuristicCost);
			 * Collections.sort(myHandCards2, compareByHeuristicCost);
			 * Collections.sort(myHandCards3, compareByHeuristicCost);
			 * Collections.sort(myHandCards4, compareByHeuristicCost);
			 * Collections.sort(myHandCards5, compareByHeuristicCost);
			 * Collections.sort(myHandCards6, compareByHeuristicCost);
			 * Collections.sort(myHandCards7, compareByHeuristicCost);
			 * Collections.sort(myHandCards8, compareByHeuristicCost);
			 * Collections.sort(myHandCards9, compareByHeuristicCost);
			 * Collections.sort(myHandCards10, compareByHeuristicCost);
			 * Collections.sort(myHandCards11, compareByHeuristicCost);
			 * Collections.sort(myHandCards12, compareByHeuristicCost);
			 */

			Collections.sort(myHandCards0, compareByPriority);
			Collections.sort(myHandCards1, compareByPriority);
			Collections.sort(myHandCards2, compareByPriority);
			Collections.sort(myHandCards3, compareByPriority);
			Collections.sort(myHandCards4, compareByPriority);
			Collections.sort(myHandCards5, compareByPriority);
			Collections.sort(myHandCards6, compareByPriority);
			Collections.sort(myHandCards7, compareByPriority);
			Collections.sort(myHandCards8, compareByPriority);
			Collections.sort(myHandCards9, compareByPriority);
			Collections.sort(myHandCards10, compareByPriority);
			Collections.sort(myHandCards11, compareByPriority);
			Collections.sort(myHandCards12, compareByPriority);

			// Mana classification
			int myMana = cardPlayers.get(0).playerMana;

			List<Cards> toBeboardCards = getNextboardCards(myMana, myHandCards, myHandCards0, myHandCards1,
					myHandCards2, myHandCards3, myHandCards4, myHandCards5, myHandCards6, myHandCards7, myHandCards8,
					myHandCards9, myHandCards10, myHandCards11, myHandCards12);

			int itemIndex = -1;

			cnumber = 0;
			for (Cards card : myHandCards) {
				System.err.println("My hand card " + cnumber + " cost: " + card.cost);
				cnumber++;
			}

			myHandCards.clear();
			myHandCards.addAll(toBeboardCards);

			enemyBoardCards.sort(Comparator.comparingInt((Cards c) -> c.abilities.contains("G") ? 0 : 1)
					.thenComparing((Cards c) -> c.abilities.contains("L") ? 0 : 1)
					.thenComparing((Cards c1, Cards c2) -> Integer.compare(c1.defense, c2.defense)));

			myBoardCards.sort(Comparator.comparingInt((Cards c) -> c.abilities.contains("L") ? 0 : 1)
					.thenComparing((Cards c1, Cards c2) -> Integer.compare(c2.attack, c1.attack)));

			cnumber = -1;

			String[] chargeString = { "", "", "", "", "", "" };
			String[] attackString = { "", "", "", "", "", "" };
			String summonString = "";
			String[] summonedCardString = { "", "", "", "", "", "" };

			int lastSummonedId = 0;

			int summonedC = 0;
			int targetId = -1;
			int targetHP = 0;
			int targetNr = 0;
			boolean isEnemyAWard = false;
			int attackerId = 0;
			int attackerHP = 0;

			int enemyGuardsHP = 100;

			System.err.println("---------BoardcardsNr: " + boardCards);
			System.err.println("---------Mana: " + myMana);
			// myAPPool, myDPPool, enemyAPPool, enemyDPPool
			int[] pointPools = new int[4];

			for (Cards card : myBoardCards) {
				pointPools[0] = pointPools[0] + card.attack;
				pointPools[1] = pointPools[1] + card.defense;
			}

			for (Cards card : enemyBoardCards) {
				pointPools[2] = pointPools[2] + card.attack;
				pointPools[3] = pointPools[3] + card.defense;
			}
			boolean myGuardsDontAttack = false;
			// if I cannot beat the enemy board, my guards wont attack
			if (!(pointPools[0] >= pointPools[3]))
				myGuardsDontAttack = true;

			boolean killerMode = false;

			if (turn > 30) {
				// Set target
				targetNr = 0;
				if (enemyBoardGuardCards.size() == 0) {
					// myAP
					if (pointPools[0] >= enemyBossHP)
						killerMode = true;
				}

				if (enemyBoardCards.size() > 0 && !killerMode) {
					targetId = enemyBoardCards.get(targetNr).instanceId;
					targetHP = enemyBoardCards.get(targetNr).defense;
					if (enemyBoardCards.get(targetNr).abilities.contains("W")) {
						isEnemyAWard = true;
						System.err.println("***Ward: " + targetId);
					} else
						isEnemyAWard = false;
				}
				System.err.println("IN HAND--------------------");
				for (Cards card : myHandCards) {
					System.err.println(card.instanceId);
				}

				// Mana calc
				while (summonedC <= myHandCards.size() - 1 && myMana >= myHandCards.get(summonedC).cost) {
					System.err.println("Manaaa: " + myMana);
					System.err.println("Scard:" + myHandCards.get(summonedC).instanceId);
					System.err.println("Scardcost:" + myHandCards.get(summonedC).cost);
					myMana = myMana - myHandCards.get(summonedC).cost;
					summonedC++;
				}

				// Chargers
				for (int i = 0; i < summonedC; i++) {
					if (i <= myHandCards.size() - 1 && myHandCards.get(i).abilities.contains("C")) {
						attackerHP = myHandCards.get(i).attack;
						if (myGuardsDontAttack && myHandCards.get(i).abilities.contains("G")) {
							// protect the guards in danger
						} else {
							chargeString[i] = "; ATTACK " + myHandCards.get(i).instanceId + " " + targetId;
						}
						if (!killerMode) {
							if (targetId == -1) {
								enemyBossHP = enemyBossHP - attackerHP;
								System.err.println("ChargerToBoss");
								System.err.println("BossHP: " + enemyBossHP);
								System.err.println("AttackerHP: " + attackerHP);
							} else {
								if (myHandCards.get(i).abilities.contains("B")) {
									enemyBossHP = enemyBossHP - (attackerHP - targetHP);
									System.err.println("ChargerAttacker: " + attackerHP);
									System.err.println("Target: " + targetHP);
									System.err.println("BreakTruAttacker: " + (attackerHP - targetHP));
								}
								if (myHandCards.get(i).abilities.contains("L")) {
									if (!isEnemyAWard)
										targetHP = 0;
								} else if (!isEnemyAWard)
									targetHP = targetHP - attackerHP;
								if (targetHP <= 0) {
									if ((targetNr + 1) <= enemyBoardCards.size() - 1) {
										targetNr++;
										targetId = enemyBoardCards.get(targetNr).instanceId;
										targetHP = enemyBoardCards.get(targetNr).defense;
										if (enemyBoardCards.get(targetNr).abilities.contains("W")) {
											isEnemyAWard = true;
											System.err.println("***Ward: " + targetId);
										} else
											isEnemyAWard = false;
									} else {
										targetId = -1;
									}
								}
							}
						}
					}
				}

				System.err.println("SC: " + summonedC);

				// A certain card to summon or item to use
				for (int i = 0; i < summonedC; i++) {
					switch (myHandCards.get(i).cardType) {
					case 0: {

						summonedCardString[i] = "SUMMON " + myHandCards.get(i).instanceId + chargeString[i];
						lastSummonedId = myHandCards.get(i).instanceId;
						break;
					}
					case 1: {

						summonedCardString[i] = "USE " + myHandCards.get(i).instanceId + " "
								+ getWeakestId(myBoardCards, lastSummonedId);
						break;
					}
					case 2: {

						summonedCardString[i] = "USE " + myHandCards.get(i).instanceId + " " + targetId;
						break;
					}
					case 3: {

						summonedCardString[i] = "USE " + myHandCards.get(i).instanceId + " -1";
						break;
					}
					default:
						summonedCardString[i] = "";
						break;
					}
					summonString = summonString + ";" + summonedCardString[i];
				}

				// Board card attackers
				for (int i = 0; i < boardCards; i++) {
					attackerId = getAttackerId(myBoardCards, targetHP, myGuardsDontAttack);
					attackerHP = getAttackerHP(myBoardCards, attackerId);
					attackString[i] = ";ATTACK " + attackerId + " " + targetId + ";";
					if (!killerMode) {
						if (targetId == -1) {
							enemyBossHP = enemyBossHP - attackerHP;
							System.err.println("AttackerToBoss");
							System.err.println("BossHP: " + enemyBossHP);
							System.err.println("AttackerHP: " + attackerHP);
						} else {
							if (myBoardCards.get(i).abilities.contains("B")) {
								enemyBossHP = enemyBossHP - (attackerHP - targetHP);
								System.err.println("Attacker: " + attackerHP);
								System.err.println("Target: " + targetHP);
								System.err.println("BreakTruAttacker: " + (attackerHP - targetHP));
							}
							if (myBoardCards.get(i).abilities.contains("L")) {
								if (!isEnemyAWard)
									targetHP = 0;
							} else if (!isEnemyAWard)
								targetHP = targetHP - attackerHP;

							if (targetHP <= 0) {
								if ((targetNr + 1) <= enemyBoardCards.size() - 1) {
									targetNr++;
									targetId = enemyBoardCards.get(targetNr).instanceId;
									targetHP = enemyBoardCards.get(targetNr).defense;
									if (enemyBoardCards.get(targetNr).abilities.contains("W")) {
										isEnemyAWard = true;
										System.err.println("***Ward: " + targetId);
									} else
										isEnemyAWard = false;
								} else {
									targetId = -1;

								}
							}
						}
					}
				}

				System.out.println(summonString + attackString[0] + attackString[1] + attackString[2] + attackString[3]
						+ attackString[4] + attackString[5]);

			} else {
				// Draft phase
				minHeuristicCost = 100;
				double prio = 100;
				int cardNr = 0;
				int cardId = 0;
				int cost = 0;
				double priorityOfCard = 0;
				System.err.println("0: " + myDeckCards0);
				System.err.println("1: " + myDeckCards1);
				System.err.println("2: " + myDeckCards2);
				System.err.println("3: " + myDeckCards3);
				for (Cards card : cards) {
					// System.err.println("xxxx: " + cardNr + " cost: " + card.heuristicCost);
					// if (card.heuristicCost < minHeuristicCost && card.cardType == 0) {
					// if (card.heuristicCost < minHeuristicCost) {
					if ((myDeckCards0 + myDeckCards1 + myDeckCards2 + myDeckCards3) < 12 && card.cost < 4 && turn >= 15)
						priorityOfCard = (card.priority / 2.0);
					else
						priorityOfCard = (double) card.priority;

					if (priorityOfCard < prio) {
						minHeuristicCost = card.heuristicCost;
						prio = card.priority;
						cardId = cardNr;
						cost = card.cost;
					}
					cardNr++;
				}
				System.err.println("cost: " + cost);
				System.out.println("PICK " + cardId);

				switch (cost) {
				case 0: {
					myDeckCards0++;
					break;
				}
				case 1: {
					myDeckCards1++;
					break;
				}
				case 2: {
					myDeckCards2++;
					break;
				}
				case 3: {
					myDeckCards3++;
					break;
				}
				case 4: {
					myDeckCards4++;
					break;
				}
				case 5: {
					myDeckCards5++;
					break;
				}
				case 6: {
					myDeckCards6++;
					break;
				}
				case 7: {
					myDeckCards7++;
					break;
				}
				case 8: {
					myDeckCards8++;
					break;
				}
				case 9: {
					myDeckCards9++;
					break;
				}
				case 10: {
					myDeckCards10++;
					break;
				}
				case 11: {
					myDeckCards11++;
					break;
				}
				case 12: {
					myDeckCards12++;
					break;
				}
				default:
					break;
				}
			}
		}
	}

}